/*
 * hashes bare secrets in a document database created at or prior to
 * release 1.0.0: prior to use of `crypto-random-string` to hash passwords
 * in the database
 */

const argon2 = require('argon2')
const express = require('express')
const app = express()
const mongoose = require('mongoose')
const uuidAPIKey = require('uuid-apikey')

const dbUtils = require('../utils/db')
const errors = require('../utils/error')
const logger = require('../middleware/logger')
const User = require('../model/user')

const error = new errors.IDRError()

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
// Make mongoose connection available globally
global.mongoose = mongoose

// Connect to MongoDB database
const dbConnectionStr = dbUtils.getMongoConnectionString()
mongoose.connect(dbConnectionStr, {
  maxPoolSize: 5
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error(error.connectionError())
})

db.once('open', async () => {
  // we're connected!
  logger.info('Successfully connected to database!')

  const names = []
  const collections = await db.db.listCollections().toArray()
  collections.forEach(collection => {
    names.push(collection.name)
  })

  if (names.includes('User')) {
    // hash the secret
    await secretToHash()
  }

  // close MongoDB connection
  mongoose.connection.close()
})

// Populating User collection
async function secretToHash () {
  const userData = await User.find({})

  for (let i = 0; i < userData.length; i++) {
    const user = userData[i]

    if (uuidAPIKey.isUUID(user.secret)) {
      const apiKey = uuidAPIKey.toAPIKey(user.secret)
      user.secret = await argon2.hash(apiKey)

      await User.findOneAndUpdate({ UUID: user.UUID }, user, { new: true })
    } else {
      logger.error(error.invalidUUID(user.UUID))
      return
    }
  }

  logger.info('User secrets were successfully hashed.')
}
